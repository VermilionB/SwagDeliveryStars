generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model beats {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?         @db.VarChar(255)
  producer_id   String?         @db.Uuid
  genre_id      String?         @db.Uuid
  beat_files_id String?         @db.Uuid
  image_url     String?         @db.VarChar(1024)
  duration      Int?
  description   String?
  bpm           Int?
  key           Int?            @db.SmallInt
  tags          String[]        @db.VarChar(255)
  is_free       Boolean?        @default(false)
  is_available  Boolean?        @default(true)
  beat_files    beat_files?     @relation(fields: [beat_files_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  genres        genres?         @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  keys          keys?           @relation(fields: [key], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?          @relation(fields: [producer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments      comments[]
  licenses      licenses[]
  likes         likes[]
  order_history order_history[]
  plays         plays[]
  ratings       ratings[]
  reposts       reposts[]
}

model genres {
  id    String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  genre String? @db.VarChar(50)
  beats beats[]
}

model licenses {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  beat_id       String?         @db.Uuid
  license_type  Int?            @db.SmallInt
  price         Decimal?        @db.Decimal(10, 2)
  beats         beats?          @relation(fields: [beat_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  license_types license_types?  @relation(fields: [license_type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_history order_history[]
}

model order_history {
  id                                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  seller_id                              String?   @db.Uuid
  consumer_id                            String?   @db.Uuid
  purchase_date                          DateTime? @db.Timestamp(6)
  license_id                             String?   @db.Uuid
  beat_id                                String?   @db.Uuid
  beats                                  beats?    @relation(fields: [beat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_history_beats_id_fk")
  users_order_history_consumer_idTousers users?    @relation("order_history_consumer_idTousers", fields: [consumer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  licenses                               licenses? @relation(fields: [license_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_order_history_seller_idTousers   users?    @relation("order_history_seller_idTousers", fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reposts {
  user_id String @db.Uuid
  beat_id String @db.Uuid
  beats   beats  @relation(fields: [beat_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, beat_id])
}

model roles {
  id        Int     @id @db.SmallInt
  role_name String? @db.VarChar(32)
  users     users[]
}

model users {
  id                                             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                          String          @unique @db.VarChar(255)
  password                                       String          @db.VarChar(255)
  username                                       String?         @db.VarChar(255)
  avatar_url                                     String?         @db.VarChar(1024)
  bio                                            String?
  contact_info                                   String?         @db.VarChar(255)
  social_links_id                                String?         @db.Uuid
  is_banned                                      Boolean?        @default(false)
  role_id                                        Int?            @default(1) @db.SmallInt
  beats                                          beats[]
  comments                                       comments[]
  followers_followers_who_followedTousers        followers[]     @relation("followers_who_followedTousers")
  followers_followers_who_followsTousers         followers[]     @relation("followers_who_followsTousers")
  likes                                          likes[]
  order_history_order_history_consumer_idTousers order_history[] @relation("order_history_consumer_idTousers")
  order_history_order_history_seller_idTousers   order_history[] @relation("order_history_seller_idTousers")
  plays                                          plays[]
  ratings                                        ratings[]
  reposts                                        reposts[]
  roles                                          roles?          @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  social_links                                   social_links?   @relation(fields: [social_links_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model beat_files {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  mp3_file String? @db.VarChar(1024)
  wav_file String? @db.VarChar(1024)
  zip_file String? @db.VarChar(1024)
  beats    beats[]
}

model license_types {
  id           Int        @id @db.SmallInt
  license_type String?    @db.VarChar(20)
  description  String?
  includes_mp3 Boolean?
  includes_wav Boolean?
  includes_zip Boolean?
  licenses     licenses[]
}

model social_links {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  youtube    String?
  soundcloud String?
  facebook   String?
  twitter    String?
  instagram  String?
  tiktok     String?
  twitch     String?
  users      users[]
}

model keys {
  id    Int     @id @db.SmallInt
  key   String? @db.VarChar(10)
  beats beats[]
}

model comments {
  id      String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  beat_id String? @db.Uuid
  user_id String? @db.Uuid
  comment String?
  beats   beats?  @relation(fields: [beat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model likes {
  user_id String @db.Uuid
  beat_id String @db.Uuid
  beats   beats  @relation(fields: [beat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, beat_id])
}

model followers {
  who_follows                         String @db.Uuid
  who_followed                        String @db.Uuid
  users_followers_who_followedTousers users  @relation("followers_who_followedTousers", fields: [who_followed], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_followers_who_followsTousers  users  @relation("followers_who_followsTousers", fields: [who_follows], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([who_follows, who_followed])
}

model plays {
  beat_id     String @db.Uuid
  listener_id String @db.Uuid
  beats       beats  @relation(fields: [beat_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users  @relation(fields: [listener_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([beat_id, listener_id])
}

model ratings {
  beat_id String @db.Uuid
  user_id String @db.Uuid
  rating  Int?
  beats   beats  @relation(fields: [beat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, beat_id])
}
